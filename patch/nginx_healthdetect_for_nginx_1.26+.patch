diff --git a/src/http/modules/ngx_http_upstream_hash_module.c b/src/http/modules/ngx_http_upstream_hash_module.c
index e741eb237..ee256078a 100644
--- a/src/http/modules/ngx_http_upstream_hash_module.c
+++ b/src/http/modules/ngx_http_upstream_hash_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_http.h>
 
+#if (NGX_HTTP_HEALTH_DETECT)
+#include "ngx_http_health_detect_module.h"
+#endif
 
 typedef struct {
     uint32_t                            hash;
@@ -238,6 +241,12 @@ ngx_http_upstream_get_hash_peer(ngx_peer_connection_t *pc, void *data)
             goto next;
         }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+        if (ngx_http_health_detect_upstream_check_peer_down(hp->rrp.peers->name, &peer->server, &peer->name)) {
+            goto next;
+        }
+#endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
@@ -560,6 +569,12 @@ ngx_http_upstream_get_chash_peer(ngx_peer_connection_t *pc, void *data)
                 continue;
             }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+            if (ngx_http_health_detect_upstream_check_peer_down(hp->rrp.peers->name, &peer->server, &peer->name)) {
+                continue;
+            }
+#endif
+
             if (peer->server.len != server->len
                 || ngx_strncmp(peer->server.data, server->data, server->len)
                    != 0)
diff --git a/src/http/modules/ngx_http_upstream_ip_hash_module.c b/src/http/modules/ngx_http_upstream_ip_hash_module.c
index 1fa01d95a..f1c2ca32d 100644
--- a/src/http/modules/ngx_http_upstream_ip_hash_module.c
+++ b/src/http/modules/ngx_http_upstream_ip_hash_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_http.h>
 
+#if (NGX_HTTP_HEALTH_DETECT)
+#include "ngx_http_health_detect_module.h"
+#endif
 
 typedef struct {
     /* the round robin data must be first */
@@ -208,6 +211,12 @@ ngx_http_upstream_get_ip_hash_peer(ngx_peer_connection_t *pc, void *data)
             goto next;
         }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+        if (ngx_http_health_detect_upstream_check_peer_down(iphp->rrp.peers->name, &peer->server, &peer->name)) {
+            goto next;
+        }
+#endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
diff --git a/src/http/modules/ngx_http_upstream_least_conn_module.c b/src/http/modules/ngx_http_upstream_least_conn_module.c
index ebe06276d..aea618056 100644
--- a/src/http/modules/ngx_http_upstream_least_conn_module.c
+++ b/src/http/modules/ngx_http_upstream_least_conn_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_http.h>
 
+#if (NGX_HTTP_HEALTH_DETECT)
+#include "ngx_http_health_detect_module.h"
+#endif
 
 static ngx_int_t ngx_http_upstream_init_least_conn_peer(ngx_http_request_t *r,
     ngx_http_upstream_srv_conf_t *us);
@@ -147,6 +150,12 @@ ngx_http_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
             continue;
         }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+        if (ngx_http_health_detect_upstream_check_peer_down(rrp->peers->name, &peer->server, &peer->name)) {
+            continue;
+        }
+#endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
@@ -206,6 +215,12 @@ ngx_http_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
                 continue;
             }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+            if (ngx_http_health_detect_upstream_check_peer_down(rrp->peers->name, &peer->server, &peer->name)) {
+                continue;
+            }
+#endif
+
             if (peer->max_fails
                 && peer->fails >= peer->max_fails
                 && now - peer->checked <= peer->fail_timeout)
diff --git a/src/http/ngx_http_upstream_round_robin.c b/src/http/ngx_http_upstream_round_robin.c
index 1f15fae50..11d88d165 100644
--- a/src/http/ngx_http_upstream_round_robin.c
+++ b/src/http/ngx_http_upstream_round_robin.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_http.h>
 
+#if (NGX_HTTP_HEALTH_DETECT)
+#include "ngx_http_health_detect_module.h"
+#endif
 
 #define ngx_http_upstream_tries(p) ((p)->tries                                \
                                     + ((p)->next ? (p)->next->tries : 0))
@@ -104,6 +107,12 @@ ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
                 peer[n].down = server[i].down;
                 peer[n].server = server[i].name;
 
+#if (NGX_HTTP_HEALTH_DETECT)
+                if (!server[i].down) {
+                    ngx_http_health_detect_upstream_add_peer(us, &server[i].name, &server[i].addrs[j]);
+                }
+#endif
+
                 *peerp = &peer[n];
                 peerp = &peer[n].next;
                 n++;
@@ -174,6 +183,12 @@ ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
                 peer[n].down = server[i].down;
                 peer[n].server = server[i].name;
 
+#if (NGX_HTTP_HEALTH_DETECT)
+                if (!server[i].down) {
+                    ngx_http_health_detect_upstream_add_peer(us, &server[i].name, &server[i].addrs[j]);
+                }
+#endif
+
                 *peerp = &peer[n];
                 peerp = &peer[n].next;
                 n++;
@@ -457,6 +472,12 @@ ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
             goto failed;
         }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+        if (ngx_http_health_detect_upstream_check_peer_down(peers->name, &peer->server, &peer->name)) {
+            goto failed;
+        }
+#endif
+
         rrp->current = peer;
 
     } else {
@@ -551,6 +572,12 @@ ngx_http_upstream_get_peer(ngx_http_upstream_rr_peer_data_t *rrp)
             continue;
         }
 
+#if (NGX_HTTP_HEALTH_DETECT)
+        if (ngx_http_health_detect_upstream_check_peer_down(rrp->peers->name, &peer->server, &peer->name)) {
+            continue;
+        }
+#endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
diff --git a/src/stream/ngx_stream_upstream_hash_module.c b/src/stream/ngx_stream_upstream_hash_module.c
index b764fcbe0..758e914bf 100644
--- a/src/stream/ngx_stream_upstream_hash_module.c
+++ b/src/stream/ngx_stream_upstream_hash_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_stream.h>
 
+#if (NGX_STREAM_HEALTH_DETECT)
+#include "ngx_stream_health_detect_module.h"
+#endif
 
 typedef struct {
     uint32_t                              hash;
@@ -237,6 +240,12 @@ ngx_stream_upstream_get_hash_peer(ngx_peer_connection_t *pc, void *data)
             goto next;
         }
 
+#if (NGX_STREAM_HEALTH_DETECT)
+        if (ngx_stream_health_detect_upstream_check_peer_down(hp->rrp.peers->name, &peer->server, &peer->name)) {
+            goto next;
+        }
+#endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
@@ -550,6 +559,12 @@ ngx_stream_upstream_get_chash_peer(ngx_peer_connection_t *pc, void *data)
                 continue;
             }
 
+#if (NGX_STREAM_HEALTH_DETECT)
+            if (ngx_stream_health_detect_upstream_check_peer_down(hp->rrp.peers->name, &peer->server, &peer->name)) {
+                continue;
+            }
+#endif
+
             if (peer->max_fails
                 && peer->fails >= peer->max_fails
                 && now - peer->checked <= peer->fail_timeout)
diff --git a/src/stream/ngx_stream_upstream_least_conn_module.c b/src/stream/ngx_stream_upstream_least_conn_module.c
index 739b20a9f..a382eb11d 100644
--- a/src/stream/ngx_stream_upstream_least_conn_module.c
+++ b/src/stream/ngx_stream_upstream_least_conn_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_stream.h>
 
+#if (NGX_STREAM_HEALTH_DETECT)
+#include "ngx_stream_health_detect_module.h"
+#endif
 
 static ngx_int_t ngx_stream_upstream_init_least_conn_peer(
     ngx_stream_session_t *s, ngx_stream_upstream_srv_conf_t *us);
@@ -143,6 +146,12 @@ ngx_stream_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
             continue;
         }
 
+#if (NGX_STREAM_HEALTH_DETECT)
+        if (ngx_stream_health_detect_upstream_check_peer_down(rrp->peers->name, &peer->server, &peer->name)) {
+            continue;
+        }
+#endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
@@ -202,6 +211,12 @@ ngx_stream_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
                 continue;
             }
 
+#if (NGX_STREAM_HEALTH_DETECT)
+            if (ngx_stream_health_detect_upstream_check_peer_down(rrp->peers->name, &peer->server, &peer->name)) {
+                continue;
+            }
+#endif
+
             if (peer->max_fails
                 && peer->fails >= peer->max_fails
                 && now - peer->checked <= peer->fail_timeout)
diff --git a/src/stream/ngx_stream_upstream_round_robin.c b/src/stream/ngx_stream_upstream_round_robin.c
index ae3bf37a6..9fdde0243 100644
--- a/src/stream/ngx_stream_upstream_round_robin.c
+++ b/src/stream/ngx_stream_upstream_round_robin.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_stream.h>
 
+#if (NGX_STREAM_HEALTH_DETECT)
+#include "ngx_stream_health_detect_module.h"
+#endif
 
 #define ngx_stream_upstream_tries(p) ((p)->tries                              \
                                       + ((p)->next ? (p)->next->tries : 0))
@@ -110,6 +113,12 @@ ngx_stream_upstream_init_round_robin(ngx_conf_t *cf,
                 peer[n].down = server[i].down;
                 peer[n].server = server[i].name;
 
+#if (NGX_STREAM_HEALTH_DETECT)
+                if (!server[i].down) {
+                    ngx_stream_health_detect_upstream_add_peer(us, &server[i].name, &server[i].addrs[j]);
+                }
+#endif
+
                 *peerp = &peer[n];
                 peerp = &peer[n].next;
                 n++;
@@ -180,6 +189,12 @@ ngx_stream_upstream_init_round_robin(ngx_conf_t *cf,
                 peer[n].down = server[i].down;
                 peer[n].server = server[i].name;
 
+#if (NGX_STREAM_HEALTH_DETECT)
+                if (!server[i].down) {
+                    ngx_stream_health_detect_upstream_add_peer(us, &server[i].name, &server[i].addrs[j]);
+                }
+#endif
+
                 *peerp = &peer[n];
                 peerp = &peer[n].next;
                 n++;
@@ -466,6 +481,12 @@ ngx_stream_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
             goto failed;
         }
 
+#if (NGX_STREAM_HEALTH_DETECT)
+        if (ngx_stream_health_detect_upstream_check_peer_down(peers->name, &peer->server, &peer->name)) {
+            goto failed;
+        }
+#endif
+
         rrp->current = peer;
 
     } else {
@@ -571,6 +592,12 @@ ngx_stream_upstream_get_peer(ngx_stream_upstream_rr_peer_data_t *rrp)
             continue;
         }
 
+#if (NGX_STREAM_HEALTH_DETECT)
+        if (ngx_stream_health_detect_upstream_check_peer_down(rrp->peers->name, &peer->server, &peer->name)) {
+            continue;
+        }
+#endif
+
         peer->current_weight += peer->effective_weight;
         total += peer->effective_weight;
 
